<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown简单入门</title>
    <url>/2020/04/13/Markdown/</url>
    <content><![CDATA[<p>以下是Markdown的最基本使用方法，忘记便回来看看，也就入了门</p>
<a id="more"></a>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p><code># 一级标题</code></p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><code>## 二级标题</code></p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><code>### 三级标题</code></p>
<hr>
<p><strong>分割线</strong>：<code>---</code></p>
<ul>
<li>列表1</li>
<li>列表2<ul>
<li>子列表1</li>
<li>子列表2<ul>
<li>孙列表1</li>
<li>孙列表2</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表1</span><br><span class="line">- 列表2</span><br><span class="line">    - 子列表1</span><br><span class="line">    - 子列表2</span><br><span class="line">        - 孙列表1</span><br><span class="line">        - 孙列表2</span><br></pre></td></tr></table></figure>


<hr>
<p>分割线 ：<code>---</code></p>
<p><a href="https://github.com/H-James" target="_blank" rel="noopener">超链接</a> ：<code>[超链接](https://github.com/H-James)</code></p>
<p><strong>图片</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片](https:&#x2F;&#x2F;h-james.github.io&#x2F;2020&#x2F;04&#x2F;13&#x2F;Markdown&#x2F;003_Markdown简单入门-rickAndmorty.png)</span><br></pre></td></tr></table></figure>
<br/>

<p><img src="https://h-james.github.io/2020/04/13/Markdown/003_Markdown%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-rickAndmorty.png" alt="图片"></p>
<hr>
<p><strong>分割线</strong> ：<code>---</code></p>
<p><strong><em>斜字体</em></strong> ：<code>*斜字体*</code></p>
<p><strong>粗字体</strong> ：<code>**粗字体**</code></p>
<hr>
<p><strong>一行代码 ：</strong></p>
<p><code>&lt;html&gt;代码&lt;/html&gt;</code></p>
<!-- <p style="display:inline-block;"> 
    <img src='blog/001_Markdown简单入门-code01.png' align='left' style="margin-bottom: 0px;"/>
</p> -->

<img src="/2020/04/13/Markdown/001_Markdown%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-code01.png" class="" title="code">


<p><strong>一段代码 ：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;代码&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<!-- <p style="display:inline-block;"> 
    <img src='blog/002_Markdown简单入门-code02.png' align='left' style="margin-bottom: 0px;"/>
</p> -->

<img src="/2020/04/13/Markdown/002_Markdown%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-code02.png" class="" title="code">

<!-- ![图片](images\Markdown简单入门-code02.png) -->

<hr>
<blockquote>
<p><strong>引用内容</strong><br><code>&gt; 引用内容</code></p>
</blockquote>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>拷贝构造函数给函数参数传值</title>
    <url>/2020/06/09/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%99%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p>我对 C++中 拷贝构造函数 以值传递的方式 给函数参数传值 的理解</p>
<p>还有，为什么是值传递呢？</p>
<p>要看懂本文章你需要了解：</p>
<ol>
<li>C++基础语法</li>
<li>C++中的引用</li>
<li>C++中的class（类和对象）</li>
<li>构造函数和析构函数</li>
<li>构造函数的分类及调用</li>
</ol>
<p>注意：请按照编号顺序查看代码说明，请从下往上看</p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"默认构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Person(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		m_Age = age;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"有参构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">—————————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 8.因为doWork传入的参数是p1，所以会自动调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// p1将会以引用的方式传入拷贝构造函数。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 所以，当编译器发现是引用，会自动转化 const Person&amp; p 为 const int* const p = &amp;p1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注意，这里的p1是只读的，因为被const修饰了，不可修改，p1的作用域也只限于拷贝构造函数内。</span></span><br><span class="line"></span><br><span class="line">	Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 9.注意，拷贝构造函数是以引用作为它的参数，其实在这个函数内还是可以修改实参的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//p.m_Age = 12; 因为拷贝构造函数使用了引用，所以去掉const就可以更改实参了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 10.我们知道构造函数的一个目的是进行初始化操作</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 我们将m_Age初始化，在这里，我们就算实现了所谓的值传递</span></span><br><span class="line"></span><br><span class="line">		m_Age = p.m_Age;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	~Person001()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.这里相当于写了 Person p = p1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了隐式转换法来调用 （调用的方法有3种，括号法、显示法、隐式转换法，请自行去了解）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象的时候，构造函数会自动调用，而且只调用一次。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为传入的参数是p1所以，会自动调用拷贝构造构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Person p)</span> <span class="comment">//这里会自动调用拷贝构造函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 11.好，回到这里</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// p.m_Age原本等于10，我们现在尝试修改p.m_Age为12，看看能不能改变实参</span></span><br><span class="line"></span><br><span class="line">	p.m_Age = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 3.实例化对象p1，运行这行代码时会调用“默认构造函数”，然后在text()函数销毁前执行“析构函数”</span></span><br><span class="line"></span><br><span class="line">	Person p1;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.给p1中的m_Age赋值为10</span></span><br><span class="line"></span><br><span class="line">	p1.m_Age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.屏幕显示：Person age = 10</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Person age = "</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.p1做为参数传入doWork函数，注意这里是值传递（那为什么呢？）</span></span><br><span class="line"></span><br><span class="line">	doWork(p1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 12.并不能改变实参，所以我们可以知道，拷贝构造函数 以值传递的方式 给函数参数 传值</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Person age = "</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先看这里，这里是主函数，程序的开始</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 2.调用test函数</span></span><br><span class="line"></span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果文章有错误，欢迎指正：<a href="mailto:2892870137@qq.com">2892870137@qq.com</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>虚函数实现原理</title>
    <url>/2020/06/20/%E8%99%9A%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>今天学C++多态时，对虚函数实现原理有些疑惑。</p>
<p>然后爬了很多文，看了很多教程。</p>
<p>经过一系列研究，以下是我的理解：</p>
<a id="more"></a>

<p>注意：请按照编号顺序查看代码说明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动物类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//没写virtual时 这是一个非静态的成员函数</span></span><br><span class="line">        <span class="comment">//它不属于类上面，是分开存储的</span></span><br><span class="line">        <span class="comment">//现在这个类是空类，空类的大小是1字节</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//但如果加了virtual后，类大小为4字节,变成虚函数</span></span><br><span class="line">        <span class="comment">//这个类的结构发生了变化，因为里面会添加一个4字节大小的指针</span></span><br><span class="line">        <span class="comment">//叫vfptr（virtual function pointer 虚函数（表）指针）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个指针会指向一个虚函数表</span></span><br><span class="line">        <span class="comment">//vftable（virtual function table 虚函数表）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有的虚函数都是通过 虚函数指针 在虚函数表中调用的</span></span><br><span class="line">        <span class="comment">//虚函数表会记录这个类中所有的虚函数的地址，</span></span><br><span class="line">        <span class="comment">//可以理解为 它是一个 只存放这个类的虚函数的地址表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不管你在这个类中写多少个虚函数，都不会影响这个实例的大小</span></span><br><span class="line">        <span class="comment">//依旧是4字节，因为虚函数也是分开存储的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//小知识：在C++的标准说明书中说到</span></span><br><span class="line">        <span class="comment">//编译器必须要保证 虚函数表的指针 存在于对象的实例中 最前面的位置</span></span><br><span class="line">        <span class="comment">//也就是那个对象最开始的地址</span></span><br><span class="line">        <span class="comment">//（这是为了保证正确取到虚函数的偏移量）</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"动物在说话"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//猫类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 重写函数：函数返回值类型，函数名，形参列表 要完全相同 才叫重写</span></span><br><span class="line">	<span class="comment">// 这里写不写 virtual都可以 </span></span><br><span class="line">	<span class="comment">// 如果父类的是虚函数的话 重写时 不写的virtual话 也会默认是virtual</span></span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"小猫在说话"</span> &lt;&lt; <span class="built_in">endl</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"小狗在说话"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="comment">// 动态多态满足条件：</span></span><br><span class="line"><span class="comment">// 1.有继承关系</span></span><br><span class="line"><span class="comment">// 2.子类要重写父类的虚函数</span></span><br><span class="line"><span class="comment">//（重写：函数返回值类型，函数名，形参列表 要完全相同 才叫重写）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态多态使用：</span></span><br><span class="line"><span class="comment">// 父类的指针或者引用 执行子类对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Animal&amp; animal)</span> <span class="comment">// Animal &amp; animal = cat;  </span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">//C++中允许父子之间的类型转换，不需要做强制类型转换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//引用的本质是起别名，引用里有一个常量指针指向cat</span></span><br><span class="line">	<span class="comment">//引用本质：Animal* const animal = &amp;cat;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//所以当用animal这个引用调用speak函数时，实际上是：</span></span><br><span class="line">	<span class="comment">//引用通过Cat的首地址找到虚函数表，从虚函数表通过指针偏移量获取speak函数的地址，从而调用speak函数</span></span><br><span class="line">	<span class="comment">//因为speak的作用域再Cat下面，所以会调用Cat下的speak</span></span><br><span class="line"></span><br><span class="line">	animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 3.</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//已知创建子类时会创建一个父类</span></span><br><span class="line">	<span class="comment">//父类中虚函数表内部记录了虚函数的地址：&amp;Animal::speak</span></span><br><span class="line">	<span class="comment">//然后继承给子类</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//子类就拥有了所有父类属性，此时子类中虚函数表的地址依然还是 &amp;Animal::speak</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//但是！！</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//我们重写了子类函数（此时重写的函数默认是vitural，所以vitural写不写都可以）</span></span><br><span class="line">	<span class="comment">//这时虚函数指针 指向的虚函数表 因为重写 就覆盖&amp;Animal::speak 变成 &amp;Cat::speak 这个地址</span></span><br><span class="line"></span><br><span class="line">	doSpeak(cat);</span><br><span class="line">	Dog dog;</span><br><span class="line">	doSpeak(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof Animal = "</span> &lt;&lt; <span class="keyword">sizeof</span>(Animal) &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	test01();</span><br><span class="line">	test02();</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果文章有误，欢迎指正: <a href="mailto:2892870137@qq.com">2892870137@qq.com</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>虚析构和纯虚析构原理</title>
    <url>/2020/06/23/%E8%99%9A%E6%9E%90%E6%9E%84%E5%92%8C%E7%BA%AF%E8%99%9A%E6%9E%90%E6%9E%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>直接上代码：请根据编号查看代码说明。</p>
<p>先总结:</p>
<ol>
<li><p>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
</li>
<li><p>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
</li>
<li><p>拥有纯虚析构函数的类也属于抽象类</p>
</li>
</ol>
<a id="more"></a>

<p>animal类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	animal() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"animal构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//能调用子类析构函数 来释放堆区的解决方法：</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//利用虚析构可以解决父类指针释放子类对象时不干净的问题</span></span><br><span class="line">	<span class="comment">//virtual ~animal() &#123; cout &lt;&lt; "animal虚析构函数调用" &lt;&lt; endl; &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//而如果想避免基类实例化，则可以将析构函数写成纯虚析构</span></span><br><span class="line">	<span class="comment">//但因为派生类（子类）不可能来实现基类（父类）的析构函数，</span></span><br><span class="line">	<span class="comment">//所以基类析构函数虽然可以标为纯虚，但是仍必须实现析构函数，</span></span><br><span class="line">	<span class="comment">//否则派生类无法继承，也无法编译通过。</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//纯虚析构 要声明也要实现（类外定义）</span></span><br><span class="line">	<span class="comment">//有了纯虚析构之后，这个类也属于抽象类，并无法实例化对象</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">virtual</span>  ~animal() = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//纯虚析构函数要类外定义</span></span><br><span class="line">animal::~animal() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"animal纯虚析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure>



<p>cat类，里面继承了父类animal</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> :</span> <span class="keyword">public</span> animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	cat(<span class="built_in">string</span> name)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"cat构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt; <span class="string">"小猫在说话"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">	</span><br><span class="line">	~cat()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Name != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"cat析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">delete</span> m_Name;</span><br><span class="line">			m_Name = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span>* m_Name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">te01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//父类指针指向了一个开辟在堆区的子类数据</span></span><br><span class="line"></span><br><span class="line">	animal* a = <span class="keyword">new</span> cat(<span class="string">"Tom"</span>);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//new一个在堆区的cat类型的对象，cat继承自animal</span></span><br><span class="line">	<span class="comment">//我们知道创建子类时会先创建父类</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//所以先调用了animal的构造函数</span></span><br><span class="line">	<span class="comment">//再是cat的构造函数</span></span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">	<span class="comment">//亿点细节：</span></span><br><span class="line">    </span><br><span class="line">		<span class="comment">//在创建父类时，如果发现父类中有虚函数</span></span><br><span class="line">		<span class="comment">//编译器就会使用一个叫虚函数表的东西，保存所有的虚函数，包括纯虚函数</span></span><br><span class="line">		<span class="comment">//在这里,animal父类的虚函数表中，有两个虚函数</span></span><br><span class="line">    </span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			class animal	size(4):</span></span><br><span class="line"><span class="comment">					+---</span></span><br><span class="line"><span class="comment">			0		| (vfptr)</span></span><br><span class="line"><span class="comment">					+---</span></span><br><span class="line"><span class="comment">					</span></span><br><span class="line"><span class="comment">			animal::$vftable@:</span></span><br><span class="line"><span class="comment">					| &amp;animal_mata</span></span><br><span class="line"><span class="comment">					|  0</span></span><br><span class="line"><span class="comment">			0		| &amp;animal::(dtor) </span></span><br><span class="line"><span class="comment">			1		| &amp;animal::speak</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">    </span><br><span class="line">		<span class="comment">//&amp;animal::(dtor)  就是animal的纯虚析构函数的地址</span></span><br><span class="line">		<span class="comment">//dtor是destructor的缩写，是析构函数的意思，中文直译叫"垃圾焚毁炉"</span></span><br><span class="line">		<span class="comment">//&amp;animal::speak   就是speak虚函数的地址</span></span><br><span class="line">    </span><br><span class="line">		<span class="comment">//接着，子类继承了这个表，重写了speak。</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			class cat       size(8):</span></span><br><span class="line"><span class="comment">			        	+---</span></span><br><span class="line"><span class="comment">			 0      	| +--- (base class animal)</span></span><br><span class="line"><span class="comment">			 0      	| | &#123;vfptr&#125;</span></span><br><span class="line"><span class="comment">			        	| +---</span></span><br><span class="line"><span class="comment">			 4      	| m_Name</span></span><br><span class="line"><span class="comment">			        	+---</span></span><br><span class="line"><span class="comment">			        </span></span><br><span class="line"><span class="comment">			cat::$vftable@:</span></span><br><span class="line"><span class="comment">					| &amp;cat_meta</span></span><br><span class="line"><span class="comment">					|  0</span></span><br><span class="line"><span class="comment">					| &amp;cat::(dtor)</span></span><br><span class="line"><span class="comment">			 0		| &amp;cat::speak</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个dtor我不知道算不算重写，我觉的应该是的</span></span><br><span class="line">    <span class="comment">//但我不了解原理，所以搬了一个别人的解释：</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当父类析构函数定义为虚函数后，子类默认就是虚析构函数，跟普通成员函数一样</span></span><br><span class="line">    <span class="comment">//现在将父类析构函数 定义为虚函数，子类再继承了 父类的虚函数表</span></span><br><span class="line">    <span class="comment">//子类的虚函数表中，就存在父类的 虚析构函数的地址，</span></span><br><span class="line">    <span class="comment">//但子类的析构函数 也是虚函数，所以重写了自己虚函数表中 父类虚析构函数的地址</span></span><br><span class="line">    <span class="comment">//变成了子类的虚析构函数地址</span></span><br><span class="line">    <span class="comment">//虽然父子的析构函数名字不一样，但是他们占同一个坑</span></span><br><span class="line">    <span class="comment">//（即父子析构函数在虚函数表中的位置是一样的，否则就不存在多态了）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用父类指针指向子类，并最后通过父类指针删除子类对象的时候，</span></span><br><span class="line">    <span class="comment">//发现animal类的析构函数是虚函数，就到子类对象的虚函数表里找析构函数</span></span><br><span class="line">    <span class="comment">//此时就会调用虚函表中 子类的虚析构函数 并很好的防止了内存泄漏</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//然后还有个问题，</span></span><br><span class="line">    <span class="comment">//既然子类的虚函数表中只有子类虚析构函数，那它怎样析构父类呢？</span></span><br><span class="line">    <span class="comment">//父类的析构函数又在哪呢？</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//其实在子类的析构函数中，底层包含着对父类析构函数的调用</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//原因我认为是：</span></span><br><span class="line">    <span class="comment">//对象都存放在栈中，创建子类对象先调用父类的对象，</span></span><br><span class="line">    <span class="comment">//父类对象压入栈，然后是子类对象入栈，由于栈是先进后出，</span></span><br><span class="line">    <span class="comment">//delete父类的时候就先调用子类对象，在调用父类对象</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	</span><br><span class="line">    a-&gt;speak();</span><br><span class="line">    <span class="comment">//因为子类的speak重写了父类的speak，父类指针调用的是子类的speak </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="comment">//父类指针在析构的时候 不会调用子类中的析构函数</span></span><br><span class="line">    <span class="comment">//导致子类如果有堆区属性，出现内存泄漏</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//原因是指针a是animal类型的指针，也就是父类类型的指针</span></span><br><span class="line">    <span class="comment">//释放a时只进行animal类的析构函数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//但父类析构函数变成虚析构之后，这个问题就解决了</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 2.</span></span><br><span class="line">	te01();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本人才疏学浅，若有疏漏和错误，请指正 <a href="mailto:2892870137@qq.com">2892870137@qq.com</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
