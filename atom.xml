<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Liu&#39;s Blog</title>
  
  <subtitle>Recording Time, Experience and Knowledge</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jamesliu.com/"/>
  <updated>2020-06-10T00:59:54.482Z</updated>
  <id>http://jamesliu.com/</id>
  
  <author>
    <name>James Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拷贝构造函数给函数参数传值</title>
    <link href="http://jamesliu.com/2020/06/09/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%99%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC/"/>
    <id>http://jamesliu.com/2020/06/09/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%99%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC/</id>
    <published>2020-06-09T03:18:37.000Z</published>
    <updated>2020-06-10T00:59:54.482Z</updated>
    
    <content type="html"><![CDATA[<p>我对 C++中 拷贝构造函数 以值传递的方式 给函数参数传值 的理解</p><p>还有，为什么是值传递呢？</p><p>要看懂本文章你需要了解：</p><ol><li>C++基础语法</li><li>C++中的引用</li><li>C++中的class（类和对象）</li><li>构造函数和析构函数</li><li>构造函数的分类及调用</li></ol><p>注意：请按照编号顺序查看代码说明，请从下往上看</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"默认构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(<span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Age = age;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"有参构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">—————————————————————————————————————————————————————————————————————————————————————————————</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.因为doWork传入的参数是p1，所以会自动调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p1将会以引用的方式传入拷贝构造函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以，当编译器发现是引用，会自动转化 const Person&amp; p 为 const int* const p = &amp;p1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，这里的p1是只读的，因为被const修饰了，不可修改，p1的作用域也只限于拷贝构造函数内。</span></span><br><span class="line"></span><br><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.注意，拷贝构造函数是以引用作为它的参数，其实在这个函数内还是可以修改实参的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//p.m_Age = 12; 因为拷贝构造函数使用了引用，所以去掉const就可以更改实参了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.我们知道构造函数的一个目的是进行初始化操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们将m_Age初始化，在这里，我们就算实现了所谓的值传递</span></span><br><span class="line"></span><br><span class="line">m_Age = p.m_Age;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~Person001()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.这里相当于写了 Person p = p1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了隐式转换法来调用 （调用的方法有3种，括号法、显示法、隐式转换法，请自行去了解）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象的时候，构造函数会自动调用，而且只调用一次。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为传入的参数是p1所以，会自动调用拷贝构造构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Person p)</span> <span class="comment">//这里会自动调用拷贝构造函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 11.好，回到这里</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// p.m_Age原本等于10，我们现在尝试修改p.m_Age为12，看看能不能改变实参</span></span><br><span class="line"></span><br><span class="line">p.m_Age = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 3.实例化对象p1，运行这行代码时会调用“默认构造函数”，然后在text()函数销毁前执行“析构函数”</span></span><br><span class="line"></span><br><span class="line">Person p1;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.给p1中的m_Age赋值为10</span></span><br><span class="line"></span><br><span class="line">p1.m_Age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.屏幕显示：Person age = 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Person age = "</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.p1做为参数传入doWork函数，注意这里是值传递（那为什么呢？）</span></span><br><span class="line"></span><br><span class="line">doWork(p1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 12.并不能改变实参，所以我们可以知道，拷贝构造函数 以值传递的方式 给函数参数 传值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Person age = "</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.首先看这里，这里是主函数，程序的开始</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 2.调用test函数</span></span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果文章有错误，欢迎指正：<a href="mailto:2892870137@qq.com">2892870137@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我对 C++中 拷贝构造函数 以值传递的方式 给函数参数传值 的理解&lt;/p&gt;
&lt;p&gt;还有，为什么是值传递呢？&lt;/p&gt;
&lt;p&gt;要看懂本文章你需要了解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C++基础语法&lt;/li&gt;
&lt;li&gt;C++中的引用&lt;/li&gt;
&lt;li&gt;C++中的class（类和对象）&lt;/li&gt;
&lt;li&gt;构造函数和析构函数&lt;/li&gt;
&lt;li&gt;构造函数的分类及调用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：请按照编号顺序查看代码说明，请从下往上看&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="http://JamesLiu.com/tags/C/"/>
    
      <category term="编程" scheme="http://JamesLiu.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown简单入门</title>
    <link href="http://jamesliu.com/2020/04/13/Markdown/"/>
    <id>http://jamesliu.com/2020/04/13/Markdown/</id>
    <published>2020-04-13T03:29:52.000Z</published>
    <updated>2020-06-09T03:20:53.408Z</updated>
    
    <content type="html"><![CDATA[<p>以下是Markdown的最基本使用方法，忘记便回来看看，也就入了门</p><a id="more"></a><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p><code># 一级标题</code></p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><code>## 二级标题</code></p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><code>### 三级标题</code></p><hr><p><strong>分割线</strong>：<code>---</code></p><ul><li>列表1</li><li>列表2<ul><li>子列表1</li><li>子列表2<ul><li>孙列表1</li><li>孙列表2</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 列表1</span><br><span class="line">- 列表2</span><br><span class="line">    - 子列表1</span><br><span class="line">    - 子列表2</span><br><span class="line">        - 孙列表1</span><br><span class="line">        - 孙列表2</span><br></pre></td></tr></table></figure><hr><p>分割线 ：<code>---</code></p><p><a href="https://github.com/H-James" target="_blank" rel="noopener">超链接</a> ：<code>[超链接](https://github.com/H-James)</code></p><p><strong>图片</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](https:&#x2F;&#x2F;h-james.github.io&#x2F;2020&#x2F;04&#x2F;13&#x2F;Markdown&#x2F;003_Markdown简单入门-rickAndmorty.png)</span><br></pre></td></tr></table></figure><br/><p><img src="https://h-james.github.io/2020/04/13/Markdown/003_Markdown%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-rickAndmorty.png" alt="图片"></p><hr><p><strong>分割线</strong> ：<code>---</code></p><p><strong><em>斜字体</em></strong> ：<code>*斜字体*</code></p><p><strong>粗字体</strong> ：<code>**粗字体**</code></p><hr><p><strong>一行代码 ：</strong></p><p><code>&lt;html&gt;代码&lt;/html&gt;</code></p><!-- <p style="display:inline-block;">     <img src='blog/001_Markdown简单入门-code01.png' align='left' style="margin-bottom: 0px;"/></p> --><img src="/2020/04/13/Markdown/001_Markdown%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-code01.png" class="" title="code"><p><strong>一段代码 ：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;代码&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><!-- <p style="display:inline-block;">     <img src='blog/002_Markdown简单入门-code02.png' align='left' style="margin-bottom: 0px;"/></p> --><img src="/2020/04/13/Markdown/002_Markdown%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-code02.png" class="" title="code"><!-- ![图片](images\Markdown简单入门-code02.png) --><hr><blockquote><p><strong>引用内容</strong><br><code>&gt; 引用内容</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是Markdown的最基本使用方法，忘记便回来看看，也就入了门&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="http://JamesLiu.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="markdown" scheme="http://JamesLiu.com/tags/markdown/"/>
    
  </entry>
  
</feed>
